/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Emapex37
 */
public class DonD extends javax.swing.JFrame {

    int phase = 0;
    
    int casesLeft = 7;
    int casesLeft2 = 6;
    int casesLeft3 = 4;
    int casesLeft4 = 3;
    int casesLeft5 = 2;
    int casesLeft6 = 1;
    int casesLeft7 = 1;
    
    int offerFlag1 = 0;    
    int offerFlag2 = 0;
    int offerFlag3 = 0;
    int offerFlag4 = 0;
    int offerFlag5 = 0;
    int offerFlag6 = 0;
    int offerFlagF = 0;
    
    int newRound1 = 0;
    int newRound2 = 0;
    int newRound3 = 0;
    int newRound4 = 0;
    int newRound5 = 0;
    int newRound6 = 0;
    int fRound = 0;
    
    double pick;    
    
    
    int totalValue = 1 + 5 + 10 + 15 + 25 + 50 + 75 + 100 + 200 + 300 + 400
            + 500 + 750 + 1000 + 5000 + 10000 + 25000 + 50000 + 75000 + 100000
            + 200000 + 300000 + 400000 + 500000 + 750000 + 1000000;
    
    
    int remain;
    
    int offer;
    
    /**
     * Creates new form DonD
     */
    public DonD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        sub = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        field = new javax.swing.JTextField();
        button = new javax.swing.JButton();
        n1 = new javax.swing.JLabel();
        n2 = new javax.swing.JLabel();
        n3 = new javax.swing.JLabel();
        n4 = new javax.swing.JLabel();
        n5 = new javax.swing.JLabel();
        n6 = new javax.swing.JLabel();
        n7 = new javax.swing.JLabel();
        n8 = new javax.swing.JLabel();
        n9 = new javax.swing.JLabel();
        n10 = new javax.swing.JLabel();
        n11 = new javax.swing.JLabel();
        n12 = new javax.swing.JLabel();
        n13 = new javax.swing.JLabel();
        n14 = new javax.swing.JLabel();
        n15 = new javax.swing.JLabel();
        n16 = new javax.swing.JLabel();
        n17 = new javax.swing.JLabel();
        n18 = new javax.swing.JLabel();
        n19 = new javax.swing.JLabel();
        n20 = new javax.swing.JLabel();
        n21 = new javax.swing.JLabel();
        n22 = new javax.swing.JLabel();
        n23 = new javax.swing.JLabel();
        n24 = new javax.swing.JLabel();
        n25 = new javax.swing.JLabel();
        n26 = new javax.swing.JLabel();
        m1 = new javax.swing.JLabel();
        m2 = new javax.swing.JLabel();
        m3 = new javax.swing.JLabel();
        m4 = new javax.swing.JLabel();
        m5 = new javax.swing.JLabel();
        m6 = new javax.swing.JLabel();
        m7 = new javax.swing.JLabel();
        m8 = new javax.swing.JLabel();
        m9 = new javax.swing.JLabel();
        m10 = new javax.swing.JLabel();
        m11 = new javax.swing.JLabel();
        m12 = new javax.swing.JLabel();
        m13 = new javax.swing.JLabel();
        m14 = new javax.swing.JLabel();
        m15 = new javax.swing.JLabel();
        m16 = new javax.swing.JLabel();
        m17 = new javax.swing.JLabel();
        m18 = new javax.swing.JLabel();
        m19 = new javax.swing.JLabel();
        m20 = new javax.swing.JLabel();
        m21 = new javax.swing.JLabel();
        m22 = new javax.swing.JLabel();
        m23 = new javax.swing.JLabel();
        m24 = new javax.swing.JLabel();
        m25 = new javax.swing.JLabel();
        m26 = new javax.swing.JLabel();
        contained = new javax.swing.JLabel();
        oLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bg.setBackground(new java.awt.Color(204, 255, 255));

        title.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        title.setText("Deal Or No Deal");

        sub.setText("Choose 7 cases");

        label1.setText("Enter a case #:");

        button.setText("Choose");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        n1.setText("1.");

        n2.setText("2.");

        n3.setText("3.");

        n4.setText("4.");

        n5.setText("5.");

        n6.setText("6.");

        n7.setText("7.");

        n8.setText("8.");

        n9.setText("9.");

        n10.setText("10.");

        n11.setText("11.");

        n12.setText("12.");

        n13.setText("13.");

        n14.setText("14.");

        n15.setText("15.");

        n16.setText("16.");

        n17.setText("17.");

        n18.setText("18.");

        n19.setText("19.");

        n20.setText("20.");

        n21.setText("21.");

        n22.setText("22.");

        n23.setText("23.");

        n24.setText("24.");

        n25.setText("25.");

        n26.setText("26.");

        contained.setText("Please choose a case");

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(bgLayout.createSequentialGroup()
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(button))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(78, 78, 78)
                            .addComponent(title))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgLayout.createSequentialGroup()
                            .addComponent(n5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(m5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(89, 89, 89)
                            .addComponent(sub))
                        .addGroup(bgLayout.createSequentialGroup()
                            .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addComponent(n6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(bgLayout.createSequentialGroup()
                                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bgLayout.createSequentialGroup()
                                            .addComponent(n7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(m7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                                            .addComponent(n11)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(m11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(40, 40, 40)))
                                    .addComponent(label1)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(bgLayout.createSequentialGroup()
                            .addComponent(n13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(m13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(bgLayout.createSequentialGroup()
                            .addComponent(n12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(m12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(55, 55, 55)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m16, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m17, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m18, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m19, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m20, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m21, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m22, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m23, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m24, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m25, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m15, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m26, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(n14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(oLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contained, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(n1)
                    .addComponent(n14)
                    .addComponent(m1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m14, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(title)
                        .addGap(29, 29, 29)
                        .addComponent(sub)
                        .addGap(18, 18, 18)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label1)
                            .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(button))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(n2)
                                            .addComponent(m2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(n3))
                                    .addComponent(m3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(n4)
                                    .addComponent(m4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(n15)
                                            .addComponent(m15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(n16))
                                    .addComponent(m16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(n17)
                                    .addComponent(m17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(bgLayout.createSequentialGroup()
                                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(bgLayout.createSequentialGroup()
                                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(n5)
                                                            .addComponent(m5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(n6))
                                                    .addComponent(m6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(n7))
                                            .addComponent(m7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(n8))
                                    .addComponent(m8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(n9)
                                    .addComponent(m9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(bgLayout.createSequentialGroup()
                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(bgLayout.createSequentialGroup()
                                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(bgLayout.createSequentialGroup()
                                                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(n18)
                                                            .addComponent(m18, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(n19))
                                                    .addComponent(m19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(n20))
                                            .addComponent(m20, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(n21))
                                    .addComponent(m21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(n22)
                                    .addComponent(m22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(n10)
                    .addComponent(n23)
                    .addComponent(m10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(n11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(n24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(m11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(m24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(n12)
                    .addComponent(n25)
                    .addComponent(m12, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m25, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(n13)
                    .addComponent(n26)
                    .addComponent(m26, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contained, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        // TODO add your handling code here:
        
        if (phase == 0){
            
            if (casesLeft > 0) {
                
                if (casesLeft == 1){
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft--;
                    sub.setText("Choose " + casesLeft + " cases");
                    button.setText("Continue");
                } else {
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft--;
                    sub.setText("Choose " + casesLeft + " cases");
                }
                
                
            } else{
                
                phase++;
                button.setText("See offer");
                
            }
            
        } else if (phase == 1){
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag1 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft2 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag1 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
            
        } else if (phase == 2) {
            
            if (newRound1 == 1){
                
                if (casesLeft2 > 0) {
                
                if (casesLeft2 == 1){
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft2--;
                    sub.setText("Choose " + casesLeft2 + " cases");
                    button.setText("Continue");
                } else {
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft2--;
                    sub.setText("Choose " + casesLeft2 + " cases");
                }
                
                
            } else{
                
                phase++;
                button.setText("See offer");
                
            }
            } else {
                newRound1 = 1;
                button.setText("Choose");
            }
            
            
            
            
            
        } else if (phase == 3) {
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag2 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft3 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag2 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 4){
            
            if (newRound2 == 1){
                
                if (casesLeft3 > 0) {
                
                if (casesLeft3 == 1){
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft3--;
                    sub.setText("Choose " + casesLeft3 + " cases");
                    button.setText("Continue");
                } else {
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft3--;
                    sub.setText("Choose " + casesLeft3 + " cases");
                }
                
                
            } else{
                
                phase++;
                button.setText("See offer");
                
            }
            } else {
                
                newRound2 = 1;
                button.setText("Choose");
            }
            
            
        } else if (phase == 5){
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag3 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft4 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag3 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 6){
            
            if (newRound3 == 1){
                
                if (casesLeft4 > 0) {
                
                if (casesLeft4 == 1){
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft4--;
                    sub.setText("Choose " + casesLeft4 + " cases");
                    button.setText("Continue");
                } else {
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft4--;
                    sub.setText("Choose " + casesLeft4 + " cases");
                }
                
                
            } else{
                
                phase++;
                button.setText("See offer");
                
            }
            } else {
                
                newRound3 = 1;
                button.setText("Choose");
            }
            
            
        } else if (phase == 7) {
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag4 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft5 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag4 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 8) {
            
            if (newRound4 == 1){
                
                if (casesLeft5 > 0) {
                
                if (casesLeft5 == 1){
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft5--;
                    sub.setText("Choose " + casesLeft5 + " cases");
                    button.setText("Continue");
                } else {
                    
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                    
                    casesLeft5--;
                    sub.setText("Choose " + casesLeft5 + " cases");
                }
                
                
            } else{
                
                phase++;
                button.setText("See offer");
                
            }
            } else {
                
                newRound4 = 1;
                button.setText("Choose");
            }
            
            
        } else if (phase == 9){
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag5 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft6 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag5 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 10){
            
            if (newRound5 == 1){
                
                if (casesLeft6 > 0){
                
                    pick = Double.parseDouble(field.getText());
                findCase((int)pick);
                
                    casesLeft6--;
                    button.setText("Continue");
                } else {
                    
                    phase++;
                    button.setText("See offer");
                }
            } else {
                
                newRound5 = 1;
                button.setText("Choose");
            }
            
            
        } else if (phase == 11){
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Offer: " + offer);
            
            if (offerFlag6 == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                    sub.setText("Choose " + casesLeft7 + " cases");
                    contained.setText("");
                }
            } else {
                
                offerFlag6 = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 12){
            
            if (newRound6 == 1){
                
                if (casesLeft7 > 0){
                
                    pick = Double.parseDouble(field.getText());
                    findCase((int)pick);
                
                    casesLeft7--;
                    button.setText("Continue");
                } else {
                    
                    phase++;
                    button.setText("See offer");
                }
            } else {
                
                newRound6 = 1;
                button.setText("Choose");
            }
        } else if (phase == 13){
            
            remain = remainingCases();
            offer = (totalValue / remain) / 2;
            
            contained.setText("Final Offer: " + offer);
            
            if (offerFlagF == 1){
                
                String oChoice = field.getText();
                if (oChoice.equals("Yes")){
                    
                    contained.setText("Game Over");
                } else if (oChoice.equals("No")){
                    
                    phase++;
                    button.setText("Continue");
                    oLabel.setText("");
                }
            } else {
                
                offerFlagF = 1;
                button.setText("Choose");
                oLabel.setText("'Yes' or 'No'");
            }
        } else if (phase == 14){
            
            if (fRound == 1){
                
                pick = Double.parseDouble(field.getText());
                finalChoice((int)pick);
                
            } else {
                
             contained.setText("Choose the case you want");
             button.setText("Choose");
             fRound = 1;
            }
            
        }
        
        
        
        
    }//GEN-LAST:event_buttonActionPerformed

    
    public void findCase(int n){
        
        if (n == 1) {
            
            m1.setText("$1");
            contained.setText("Case #1 Contained $1");
        } else if (n == 2){
            
            m2.setText("$5");
            contained.setText("Case #2 Contained $5");
        } else if (n == 3){
            
            m3.setText("$10");
            contained.setText("Case #3 Contained $10");
        } else if (n == 4){
            
            m4.setText("$15");
            contained.setText("Case #4 Contained $15");
        } else if (n == 5){
            
            m5.setText("$25");
            contained.setText("Case #5 Contained $25");
        } else if (n == 6){
            
            m6.setText("$50");
            contained.setText("Case #6 Contained $50");
        } else if (n == 7){
            
            m7.setText("$75");
            contained.setText("Case #7 Contained $75");
        } else if (n == 8){
            
            m8.setText("$100");
            contained.setText("Case #8 Contained $100");
        } else if (n == 9){
            
            m9.setText("$200");
            contained.setText("Case #9 Contained $200");
        } else if (n == 10){
            
            m10.setText("$300");
            contained.setText("Case #10 Contained $300");
        } else if (n == 11){
            
            m11.setText("$400");
            contained.setText("Case #11 Contained $400");
        } else if (n == 12){
            
            m12.setText("$500");
            contained.setText("Case #12 Contained $500");
        } else if (n == 13){
            
            m13.setText("$750");
            contained.setText("Case #13 Contained $750");
        } else if (n == 14){
            
            m14.setText("$1000");
            contained.setText("Case #14 Contained $1,000");
        } else if (n == 15){
            
            m15.setText("$5000");
            contained.setText("Case #15 Contained $5,000");
        } else if (n == 16){
            
            m16.setText("$10000");
            contained.setText("Case #16 Contained $10,000");
        } else if (n == 17){
            
            m17.setText("$25000");
            contained.setText("Case #17 Contained $25,000");
        } else if (n == 18){
            
            m18.setText("$50000");
            contained.setText("Case #18 Contained $50,000");
        } else if (n == 19){
            
            m19.setText("$75000");
            contained.setText("Case #19 Contained $75,000");
        } else if (n == 20){
            
            m20.setText("$100000");
            contained.setText("Case #20 Contained $100,000");
        } else if (n == 21){
            
            m21.setText("200000");
            contained.setText("Case #21 Contained $200,000");
        } else if (n == 22){
            
            m22.setText("$300000");
            contained.setText("Case #22 Contained $300,000");
        } else if (n == 23){
            
            m23.setText("$400000");
            contained.setText("Case #23 Contained $400,000");
        } else if (n == 24){
            
            m24.setText("$500000");
            contained.setText("Case #24 Contained $500,000");
        } else if (n == 25){
            
            m25.setText("$750000");
            contained.setText("Case #25 Contained $750,000");
        } else if (n == 26){
            
            m26.setText("$1000000");
            contained.setText("Case #26 Contained $1,000,000");
        } else {
            
            contained.setText("Please choose a case");
        }
        
        
    }
    
    
    public int remainingCases(){
        
        int rCases = 0;
        
        if (m2.getText().equals("")){
            rCases++;
        }
        
        if (m3.getText().equals("")){
            rCases++;
        }
        
        if (m4.getText().equals("")){
            rCases++;
        }
        if (m5.getText().equals("")){
            rCases++;
        }
        if (m6.getText().equals("")){
            rCases++;
        }
        if (m7.getText().equals("")){
            rCases++;
        }
        if (m8.getText().equals("")){
            rCases++;
        }
        if (m9.getText().equals("")){
            rCases++;
        }
        if (m10.getText().equals("")){
            rCases++;
        }
        if (m11.getText().equals("")){
            rCases++;
        }
        if (m12.getText().equals("")){
            rCases++;
        }
        if (m13.getText().equals("")){
            rCases++;
        }
        if (m14.getText().equals("")){
            rCases++;
        }
        if (m15.getText().equals("")){
            rCases++;
        }
        if (m16.getText().equals("")){
            rCases++;
        }
        if (m17.getText().equals("")){
            rCases++;
        }
        if (m18.getText().equals("")){
            rCases++;
        }
        if (m19.getText().equals("")){
            rCases++;
        }
        if (m20.getText().equals("")){
            rCases++;
        }
        if (m21.getText().equals("")){
            rCases++;
        }
        if (m22.getText().equals("")){
            rCases++;
        }
        if (m23.getText().equals("")){
            rCases++;
        }
        if (m24.getText().equals("")){
            rCases++;
        }
        if (m25.getText().equals("")){
            rCases++;
        }
        if (m26.getText().equals("")){
            rCases++;
        }
        
        return(rCases);
    }
    
    public void finalChoice(int n){
        
        if (n == 1) {
            
            
            contained.setText("You won $1");
            oLabel.setText("Better luck next time");
        } else if (n == 2){
            
            
            contained.setText("You won $5");
            oLabel.setText("Better luck next time");
        } else if (n == 3){
            
            
            contained.setText("You won $10");
            oLabel.setText("Better luck next time");
        } else if (n == 4){
            
            
            contained.setText("You won $15");
            oLabel.setText("Better luck next time");
        } else if (n == 5){
            
            
            contained.setText("You won $25");
            oLabel.setText("Better luck next time");
        } else if (n == 6){
            
            
            contained.setText("You won $50");
            oLabel.setText("Better luck next time");
        } else if (n == 7){
            
            
            contained.setText("You won $75");
            oLabel.setText("Better luck next time");
        } else if (n == 8){
            
            
            contained.setText("You won $100");
            oLabel.setText("Better luck next time");
        } else if (n == 9){
            
            
            contained.setText("You won $200");
            oLabel.setText("Better luck next time");
        } else if (n == 10){
            
            
            contained.setText("You won $300");
            oLabel.setText("Better luck next time");
        } else if (n == 11){
            
            
            contained.setText("You won $400");
            oLabel.setText("Better luck next time");
        } else if (n == 12){
            
            
            contained.setText("You won $500");
            oLabel.setText("Better luck next time");
        } else if (n == 13){
            
            
            contained.setText("You won $750");
            oLabel.setText("Better luck next time");
        } else if (n == 14){
            
            
            contained.setText("You won $1,000");
            oLabel.setText("Not bad");
        } else if (n == 15){
            
            
            contained.setText("You won $5,000");
            oLabel.setText("Not bad");
        } else if (n == 16){
            
            
            contained.setText("You won $10,000");
            oLabel.setText("Not bad");
        } else if (n == 17){
            
            
            contained.setText("You won $25,000");
            oLabel.setText("Not bad");
        } else if (n == 18){
            
            
            contained.setText("You won $50,000");
            oLabel.setText("Not bad");
        } else if (n == 19){
            
            
            contained.setText("You won $75,000");
            oLabel.setText("Not bad");
        } else if (n == 20){
            
            
            contained.setText("You won $100,000");
            oLabel.setText("Great!");
        } else if (n == 21){
            
            
            contained.setText("You won $200,000");
            oLabel.setText("Great!");
        } else if (n == 22){
            
            
            contained.setText("You won $300,000");
            oLabel.setText("Great!");
        } else if (n == 23){
            
            
            contained.setText("You won $400,000");
            oLabel.setText("Great!");
        } else if (n == 24){
            
            
            contained.setText("You won $500,000");
            oLabel.setText("Great!");
        } else if (n == 25){
            
            
            contained.setText("You won $750,000");
            oLabel.setText("Great!");
        } else if (n == 26){
            
            
            contained.setText("You won $1,000,000");
            oLabel.setText("Amazing!");
        } else {
            
            contained.setText("Please pick a case");
        }
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DonD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DonD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DonD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DonD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DonD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton button;
    private javax.swing.JLabel contained;
    private javax.swing.JTextField field;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel m1;
    private javax.swing.JLabel m10;
    private javax.swing.JLabel m11;
    private javax.swing.JLabel m12;
    private javax.swing.JLabel m13;
    private javax.swing.JLabel m14;
    private javax.swing.JLabel m15;
    private javax.swing.JLabel m16;
    private javax.swing.JLabel m17;
    private javax.swing.JLabel m18;
    private javax.swing.JLabel m19;
    private javax.swing.JLabel m2;
    private javax.swing.JLabel m20;
    private javax.swing.JLabel m21;
    private javax.swing.JLabel m22;
    private javax.swing.JLabel m23;
    private javax.swing.JLabel m24;
    private javax.swing.JLabel m25;
    private javax.swing.JLabel m26;
    private javax.swing.JLabel m3;
    private javax.swing.JLabel m4;
    private javax.swing.JLabel m5;
    private javax.swing.JLabel m6;
    private javax.swing.JLabel m7;
    private javax.swing.JLabel m8;
    private javax.swing.JLabel m9;
    private javax.swing.JLabel n1;
    private javax.swing.JLabel n10;
    private javax.swing.JLabel n11;
    private javax.swing.JLabel n12;
    private javax.swing.JLabel n13;
    private javax.swing.JLabel n14;
    private javax.swing.JLabel n15;
    private javax.swing.JLabel n16;
    private javax.swing.JLabel n17;
    private javax.swing.JLabel n18;
    private javax.swing.JLabel n19;
    private javax.swing.JLabel n2;
    private javax.swing.JLabel n20;
    private javax.swing.JLabel n21;
    private javax.swing.JLabel n22;
    private javax.swing.JLabel n23;
    private javax.swing.JLabel n24;
    private javax.swing.JLabel n25;
    private javax.swing.JLabel n26;
    private javax.swing.JLabel n3;
    private javax.swing.JLabel n4;
    private javax.swing.JLabel n5;
    private javax.swing.JLabel n6;
    private javax.swing.JLabel n7;
    private javax.swing.JLabel n8;
    private javax.swing.JLabel n9;
    private javax.swing.JLabel oLabel;
    private javax.swing.JLabel sub;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
